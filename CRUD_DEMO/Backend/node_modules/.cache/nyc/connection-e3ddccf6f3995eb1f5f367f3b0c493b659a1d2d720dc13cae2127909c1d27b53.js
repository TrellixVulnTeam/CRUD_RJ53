function cov_1s77bv8b95(){var path="C:\\Users\\91630\\Desktop\\CRUD_DEMO\\Backend\\src\\utilities\\connection.js";var hash="094479cc24ac9cb146ec341e92267057e592ec4e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\91630\\Desktop\\CRUD_DEMO\\Backend\\src\\utilities\\connection.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:36}},"1":{start:{line:2,column:15},end:{line:2,column:30}},"2":{start:{line:3,column:0},end:{line:3,column:34}},"3":{start:{line:4,column:12},end:{line:4,column:50}},"4":{start:{line:10,column:13},end:{line:52,column:1}},"5":{start:{line:54,column:21},end:{line:54,column:85}},"6":{start:{line:62,column:17},end:{line:62,column:19}},"7":{start:{line:69,column:0},end:{line:78,column:1}},"8":{start:{line:71,column:4},end:{line:77,column:5}},"9":{start:{line:72,column:8},end:{line:72,column:129}},"10":{start:{line:74,column:20},end:{line:74,column:62}},"11":{start:{line:75,column:8},end:{line:75,column:27}},"12":{start:{line:76,column:8},end:{line:76,column:20}},"13":{start:{line:80,column:0},end:{line:80,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:69,column:27},end:{line:69,column:28}},loc:{start:{line:69,column:36},end:{line:78,column:1}},line:69}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"094479cc24ac9cb146ec341e92267057e592ec4e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1s77bv8b95=function(){return actualCoverage;};}return actualCoverage;}cov_1s77bv8b95();const mongoose=(cov_1s77bv8b95().s[0]++,require('mongoose'));//importing mongoose library
const Schema=(cov_1s77bv8b95().s[1]++,mongoose.Schema);//declaring variable of type Schema
cov_1s77bv8b95().s[2]++;mongoose.Promise=global.Promise;//mongoose works with asynchronous operations handled using callbacks and promises
const url=(cov_1s77bv8b95().s[3]++,'mongodb://localhost:27017/EmployeeDB');//MongoDB protocol followed by host and the database name as a parameter
/*
schema defines the structure of the database
schema used to mention the fields,types of fields,validations etc
*/let schema=(cov_1s77bv8b95().s[4]++,{"EmployeeId":{type:Number,unique:true,required:[true,'Required field']},"FullName":{type:String,required:[true,'Required field']},"Salary":{type:Number,required:[true,'Required field']},"Designation":{type:String,required:[true,'Required field']},"MobileNo":{type:Number,unique:true,required:[true,'Required field']},"Email":{type:String,unique:true,required:[true,'Required field']},"Address":{type:{"City":{type:String,required:[true,'Required field']},"State":{type:String,required:[true,'Required field']}},required:[true,'Required field']}});let employeeSchema=(cov_1s77bv8b95().s[5]++,new Schema(schema,{collection:'Employee',timestamps:true}));/*
Schema class provided by mongoose library
first parameter as schema
second parameter as collection name
timestamps to recor create and update of each document
*/let connection=(cov_1s77bv8b95().s[6]++,{});/* 
  model takes schema and name of the collection as input
  returns object used to access documents in a given collection
 */cov_1s77bv8b95().s[7]++;connection.getCollection=async()=>{cov_1s77bv8b95().f[0]++;cov_1s77bv8b95().s[8]++;try{cov_1s77bv8b95().s[9]++;return(await mongoose.connect(url,{useNewUrlParser:true,useUnifiedTopology:true})).model('Employee',employeeSchema);}catch(err){let error=(cov_1s77bv8b95().s[10]++,new Error("Could not connect to Database"));cov_1s77bv8b95().s[11]++;error.status=500;cov_1s77bv8b95().s[12]++;throw error;}};cov_1s77bv8b95().s[13]++;module.exports=connection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbm5lY3Rpb24uanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiU2NoZW1hIiwiUHJvbWlzZSIsImdsb2JhbCIsInVybCIsInNjaGVtYSIsInR5cGUiLCJOdW1iZXIiLCJ1bmlxdWUiLCJyZXF1aXJlZCIsIlN0cmluZyIsImVtcGxveWVlU2NoZW1hIiwiY29sbGVjdGlvbiIsInRpbWVzdGFtcHMiLCJjb25uZWN0aW9uIiwiZ2V0Q29sbGVjdGlvbiIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJtb2RlbCIsImVyciIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoid25EQWVZOzJGQWZaLEtBQU1BLENBQUFBLFFBQVEsMEJBQUdDLE9BQU8sQ0FBQyxVQUFELENBQVYsQ0FBZCxDQUFzQztBQUN0QyxLQUFNQyxDQUFBQSxNQUFNLDBCQUFHRixRQUFRLENBQUNFLE1BQVosQ0FBWixDQUFnQzt3QkFDaENGLFFBQVEsQ0FBQ0csT0FBVCxDQUFtQkMsTUFBTSxDQUFDRCxPQUExQixDQUFrQztBQUNsQyxLQUFNRSxDQUFBQSxHQUFHLDBCQUFHLHNDQUFILENBQVQsQ0FBbUQ7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsRUFDQSxHQUFJQyxDQUFBQSxNQUFNLDBCQUFHLENBQ1QsYUFBZSxDQUNYQyxJQUFJLENBQUdDLE1BREksQ0FFWEMsTUFBTSxDQUFHLElBRkUsQ0FHWEMsUUFBUSxDQUFHLENBQUMsSUFBRCxDQUFNLGdCQUFOLENBSEEsQ0FETixDQU1ULFdBQWEsQ0FDVEgsSUFBSSxDQUFHSSxNQURFLENBRVRELFFBQVEsQ0FBRyxDQUFDLElBQUQsQ0FBTSxnQkFBTixDQUZGLENBTkosQ0FVVCxTQUFXLENBQ1BILElBQUksQ0FBR0MsTUFEQSxDQUVQRSxRQUFRLENBQUcsQ0FBQyxJQUFELENBQU0sZ0JBQU4sQ0FGSixDQVZGLENBY1QsY0FBZ0IsQ0FDWkgsSUFBSSxDQUFHSSxNQURLLENBRVpELFFBQVEsQ0FBRyxDQUFDLElBQUQsQ0FBTSxnQkFBTixDQUZDLENBZFAsQ0FrQlQsV0FBVyxDQUNQSCxJQUFJLENBQUdDLE1BREEsQ0FFUEMsTUFBTSxDQUFHLElBRkYsQ0FHUEMsUUFBUSxDQUFHLENBQUMsSUFBRCxDQUFNLGdCQUFOLENBSEosQ0FsQkYsQ0F1QlQsUUFBUSxDQUNKSCxJQUFJLENBQUdJLE1BREgsQ0FFSkYsTUFBTSxDQUFHLElBRkwsQ0FHSkMsUUFBUSxDQUFHLENBQUMsSUFBRCxDQUFNLGdCQUFOLENBSFAsQ0F2QkMsQ0E0QlQsVUFBVSxDQUNOSCxJQUFJLENBQUcsQ0FDSCxPQUFTLENBQ0xBLElBQUksQ0FBR0ksTUFERixDQUVMRCxRQUFRLENBQUcsQ0FBQyxJQUFELENBQU0sZ0JBQU4sQ0FGTixDQUROLENBS0gsUUFBVSxDQUNOSCxJQUFJLENBQUdJLE1BREQsQ0FFTkQsUUFBUSxDQUFHLENBQUMsSUFBRCxDQUFNLGdCQUFOLENBRkwsQ0FMUCxDQURELENBV05BLFFBQVEsQ0FBRyxDQUFDLElBQUQsQ0FBTSxnQkFBTixDQVhMLENBNUJELENBQUgsQ0FBVixDQTRDQSxHQUFJRSxDQUFBQSxjQUFjLDBCQUFHLEdBQUlWLENBQUFBLE1BQUosQ0FBV0ksTUFBWCxDQUFtQixDQUFFTyxVQUFVLENBQUcsVUFBZixDQUEwQkMsVUFBVSxDQUFFLElBQXRDLENBQW5CLENBQUgsQ0FBbEIsQ0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFFQSxHQUFJQyxDQUFBQSxVQUFVLDBCQUFHLEVBQUgsQ0FBZCxDQUdBO0FBQ0E7QUFDQTtBQUNBLEcsd0JBQ0FBLFVBQVUsQ0FBQ0MsYUFBWCxDQUEyQixTQUFTLGlEQUVoQyxHQUFHLHlCQUNDLE1BQU8sQ0FBQyxLQUFNaEIsQ0FBQUEsUUFBUSxDQUFDaUIsT0FBVCxDQUFpQlosR0FBakIsQ0FBcUIsQ0FBQ2EsZUFBZSxDQUFHLElBQW5CLENBQXdCQyxrQkFBa0IsQ0FBRyxJQUE3QyxDQUFyQixDQUFQLEVBQWlGQyxLQUFqRixDQUF1RixVQUF2RixDQUFrR1IsY0FBbEcsQ0FBUCxDQUNILE9BQU1TLEdBQU4sQ0FBVSxDQUNQLEdBQUlDLENBQUFBLEtBQUssMkJBQUcsR0FBSUMsQ0FBQUEsS0FBSixDQUFVLCtCQUFWLENBQUgsQ0FBVCxDQURPLHlCQUVQRCxLQUFLLENBQUNFLE1BQU4sQ0FBZSxHQUFmLENBRk8seUJBR1AsS0FBTUYsQ0FBQUEsS0FBTixDQUNILENBQ0osQ0FURCxDLHlCQVdBRyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJYLFVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpOyAvL2ltcG9ydGluZyBtb25nb29zZSBsaWJyYXJ5XHJcbmNvbnN0IFNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYTsgLy9kZWNsYXJpbmcgdmFyaWFibGUgb2YgdHlwZSBTY2hlbWFcclxubW9uZ29vc2UuUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlOy8vbW9uZ29vc2Ugd29ya3Mgd2l0aCBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyBoYW5kbGVkIHVzaW5nIGNhbGxiYWNrcyBhbmQgcHJvbWlzZXNcclxuY29uc3QgdXJsID0gJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvRW1wbG95ZWVEQic7Ly9Nb25nb0RCIHByb3RvY29sIGZvbGxvd2VkIGJ5IGhvc3QgYW5kIHRoZSBkYXRhYmFzZSBuYW1lIGFzIGEgcGFyYW1ldGVyXHJcblxyXG4vKlxyXG5zY2hlbWEgZGVmaW5lcyB0aGUgc3RydWN0dXJlIG9mIHRoZSBkYXRhYmFzZVxyXG5zY2hlbWEgdXNlZCB0byBtZW50aW9uIHRoZSBmaWVsZHMsdHlwZXMgb2YgZmllbGRzLHZhbGlkYXRpb25zIGV0Y1xyXG4qL1xyXG5sZXQgc2NoZW1hID0ge1xyXG4gICAgXCJFbXBsb3llZUlkXCIgOiB7XHJcbiAgICAgICAgdHlwZSA6IE51bWJlcixcclxuICAgICAgICB1bmlxdWUgOiB0cnVlLFxyXG4gICAgICAgIHJlcXVpcmVkIDogW3RydWUsJ1JlcXVpcmVkIGZpZWxkJ11cclxuICAgIH0sXHJcbiAgICBcIkZ1bGxOYW1lXCIgOiB7XHJcbiAgICAgICAgdHlwZSA6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZCA6IFt0cnVlLCdSZXF1aXJlZCBmaWVsZCddXHJcbiAgICB9LFxyXG4gICAgXCJTYWxhcnlcIiA6IHtcclxuICAgICAgICB0eXBlIDogTnVtYmVyLFxyXG4gICAgICAgIHJlcXVpcmVkIDogW3RydWUsJ1JlcXVpcmVkIGZpZWxkJ11cclxuICAgIH0sXHJcbiAgICBcIkRlc2lnbmF0aW9uXCIgOiB7XHJcbiAgICAgICAgdHlwZSA6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZCA6IFt0cnVlLCdSZXF1aXJlZCBmaWVsZCddXHJcbiAgICB9LFxyXG4gICAgXCJNb2JpbGVOb1wiOntcclxuICAgICAgICB0eXBlIDogTnVtYmVyLFxyXG4gICAgICAgIHVuaXF1ZSA6IHRydWUsXHJcbiAgICAgICAgcmVxdWlyZWQgOiBbdHJ1ZSwnUmVxdWlyZWQgZmllbGQnXVxyXG4gICAgfSxcclxuICAgIFwiRW1haWxcIjp7XHJcbiAgICAgICAgdHlwZSA6IFN0cmluZyxcclxuICAgICAgICB1bmlxdWUgOiB0cnVlLFxyXG4gICAgICAgIHJlcXVpcmVkIDogW3RydWUsJ1JlcXVpcmVkIGZpZWxkJ11cclxuICAgIH0sXHJcbiAgICBcIkFkZHJlc3NcIjp7XHJcbiAgICAgICAgdHlwZSA6IHtcclxuICAgICAgICAgICAgXCJDaXR5XCIgOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlIDogU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQgOiBbdHJ1ZSwnUmVxdWlyZWQgZmllbGQnXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcIlN0YXRlXCIgOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlIDogU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQgOiBbdHJ1ZSwnUmVxdWlyZWQgZmllbGQnXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXF1aXJlZCA6IFt0cnVlLCdSZXF1aXJlZCBmaWVsZCddXHJcbiAgICB9LFxyXG5cclxufTtcclxuXHJcbmxldCBlbXBsb3llZVNjaGVtYSA9IG5ldyBTY2hlbWEoc2NoZW1hLCB7IGNvbGxlY3Rpb24gOiAnRW1wbG95ZWUnLHRpbWVzdGFtcHM6IHRydWUgfSk7XHJcbi8qXHJcblNjaGVtYSBjbGFzcyBwcm92aWRlZCBieSBtb25nb29zZSBsaWJyYXJ5XHJcbmZpcnN0IHBhcmFtZXRlciBhcyBzY2hlbWFcclxuc2Vjb25kIHBhcmFtZXRlciBhcyBjb2xsZWN0aW9uIG5hbWVcclxudGltZXN0YW1wcyB0byByZWNvciBjcmVhdGUgYW5kIHVwZGF0ZSBvZiBlYWNoIGRvY3VtZW50XHJcbiovXHJcblxyXG5sZXQgY29ubmVjdGlvbiA9IHt9O1xyXG5cclxuXHJcbi8qIFxyXG4gIG1vZGVsIHRha2VzIHNjaGVtYSBhbmQgbmFtZSBvZiB0aGUgY29sbGVjdGlvbiBhcyBpbnB1dFxyXG4gIHJldHVybnMgb2JqZWN0IHVzZWQgdG8gYWNjZXNzIGRvY3VtZW50cyBpbiBhIGdpdmVuIGNvbGxlY3Rpb25cclxuICovXHJcbmNvbm5lY3Rpb24uZ2V0Q29sbGVjdGlvbiA9IGFzeW5jKCk9PntcclxuXHJcbiAgICB0cnl7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBtb25nb29zZS5jb25uZWN0KHVybCx7dXNlTmV3VXJsUGFyc2VyIDogdHJ1ZSx1c2VVbmlmaWVkVG9wb2xvZ3kgOiB0cnVlfSkpLm1vZGVsKCdFbXBsb3llZScsZW1wbG95ZWVTY2hlbWEpO1xyXG4gICAgfWNhdGNoKGVycil7XHJcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKFwiQ291bGQgbm90IGNvbm5lY3QgdG8gRGF0YWJhc2VcIik7XHJcbiAgICAgICAgZXJyb3Iuc3RhdHVzID0gNTAwO1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGNvbm5lY3Rpb247Il19